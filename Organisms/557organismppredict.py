# -*- coding: utf-8 -*-
"""557OrganismPPredict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/122E0CMXs91LwRys_fknyfksP67s07Hbn
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.impute import KNNImputer
from sklearn.metrics import r2_score
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression

def txtToDf(filename, percentage):
  file1 = open(filename, 'r')
  count = 0
  first = []
  second = []
  third = []
  fourth = []

  # Using for loop
  for line in file1:
    if line[0] == "=":
      for x in range(count,5):
        if x == 1:
          first.append(None)
        elif x == 2:
          second.append(None)
        elif x == 3:
          third.append(None)
        elif x == 4:
          fourth.append(None)
      count = 0
    elif count == 1:
      first.append(int(line))
    elif count == 2:
      second.append(int(line))
    elif count == 3:
      third.append(int(line))
    elif count == 4:
      fourth.append(int(line))
    count += 1

  file1.close()

  first.pop(0)
  second.pop(0)
  third.pop(0)
  fourth.pop(0)

  p = [percentage]* len(first)

  d= {'first': first, 'second': second, 'third':third, 'fourth': fourth, 'p': p}

  df = pd.DataFrame(data = d)

  return df

df_1P = txtToDf('NonMoving1P.txt', 1)
df_10 = txtToDf('NotMoving10P.txt', 10)
df_Point1P = txtToDf('NotMovingPoint1Percent.txt', 0.1)

result = pd.concat([df_1P, df_10, df_Point1P], axis=0)
result

X = result.drop(columns = 'p', axis =1)
y = result['p']
y.astype('int')
y_Log = y.apply(lambda x: 'small' if x == 0 else ('medium' if x == 1 else 'large'))
y_Log

imputer = KNNImputer(n_neighbors = 3)
X = imputer.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X, y , test_size = 0.3)

reg = LinearRegression().fit(X_train, y_train)

y_pred = reg.predict(X_test)

r2_score(y_test, y_pred)

X_train_log, X_test_log, y_train_log, y_test_log = train_test_split(X, y_Log , test_size = 0.3)

logreg = LogisticRegression(multi_class='multinomial').fit(X_train_log, y_train_log)

y_pred_log = logreg.predict(X_test_log)

accuracy_score(y_pred_log, y_test_log)

